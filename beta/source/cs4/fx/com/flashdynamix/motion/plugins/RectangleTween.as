package com.flashdynamix.motion.plugins {	import flash.display.DisplayObject;	import flash.geom.Rectangle;	import com.flashdynamix.motion.plugins.AbstractTween;		/**	 * @author FlashDynamix	 */	public class RectangleTween extends AbstractTween {				public static var key : Class = Rectangle;		private var _current : Rectangle;		protected var _to : Rectangle;		protected var _from : Rectangle;		/** @private */		internal var displayObject : DisplayObject;		public function RectangleTween() {			_to = new Rectangle();			_from = new Rectangle();		}		override public function construct(instance : Object, applyToInstance : Object) : void {			inited = false;						_current = instance as Rectangle;			displayObject = applyToInstance as DisplayObject;		}		override public function set to(item : Object) : void {			_to = item as Rectangle;		}		override public function get to() : Object {			return _to;		}		override public function set from(item : Object) : void {			_from = item as Rectangle;		}		override public function get from() : Object {			return _from;		}		override public function get current() : Object {			return _current;		}		override public function get instance() : Object {			return (displayObject) ? displayObject : current;		}		override protected function match(item : AbstractTween) : Boolean {			return (item is RectangleTween && (current == item.current || ((item as RectangleTween).displayObject == null || (item as RectangleTween).displayObject == displayObject)) );		}		override public function toTarget(toObj : Object) : void {			if(to is Rectangle) {				var rect : Rectangle = toObj as Rectangle;							addTo("x", rect.x);				addTo("y", rect.y);				addTo("width", rect.width);				addTo("height", rect.height);			} else {				super.toTarget(toObj);			}		}		override public function fromTarget(fromObj : Object) : void {			if(from is Rectangle) {				var rect : Rectangle = fromObj as Rectangle;							addFrom("x", rect.x);				addFrom("y", rect.y);				addFrom("width", rect.width);				addFrom("height", rect.height);			} else {				super.fromTarget(fromObj);			}		}		override public function update(position : Number) : void {			var q : Number = 1 - position, propName : String, i : int = 0;						if(!inited && _propCount > 0) {				if(displayObject) {					_current = displayObject.scrollRect;					_from = displayObject.scrollRect;				} else {					for(i = 0;i < _propCount; i++) {						propName = propNames[i];						_from[propName] = _current[propName];					}				}				inited = true;			}						for(i = 0;i < _propCount; i++) {				propName = propNames[i];								if(propName == "x") {					_current.x = _from.x * q + _to.x * position;				} else if(propName == "y") {					_current.y = _from.y * q + _to.y * position;				} else if(propName == "width") {					_current.width = _from.width * q + _to.width * position;				} else if(propName == "height") {					_current.height = _from.height * q + _to.height * position;				} else {					_current[propName] = _from[propName] * q + _to[propName] * position;				}								if(timeline.snapClosest) _current[propName] = Math.round(_current[propName]);			}						apply();		}		override protected function apply() : void {			if(displayObject == null) return;						displayObject.scrollRect = _current;		}		override public function dispose() : void {			_to = null;			_from = null;			_current = null;			displayObject = null;						super.dispose();		}	}}