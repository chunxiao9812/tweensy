package com.flashdynamix.motion.plugins {	import flash.display.DisplayObject;	import flash.geom.ColorTransform;	
	/**	 * This plugin will be used when tweening ColorTransforms.	 */	public class ColorTween extends AbstractTween {		public static var key : Class = ColorTransform;		private var _current : ColorTransform;		protected var _to : ColorTransform;		protected var _from : ColorTransform;		/** @private */		internal var displayObject : DisplayObject;
		public function ColorTween() {			_to = new ColorTransform();			_from = new ColorTransform();		}
		override public function construct(instance : Object, applyToInstance : Object) : void {			inited = false;						_current = instance as ColorTransform;			displayObject = applyToInstance as DisplayObject;		}
		override protected function set to(item : Object) : void {			_to = item as ColorTransform;		}
		override protected function get to() : Object {			return _to;		}
		override protected function set from(item : Object) : void {			_from = item as ColorTransform;		}
		override protected function get from() : Object {			return _from;		}
		override public function get current() : Object {			return _current;		}
		override public function get instance() : Object {			return (displayObject) ? displayObject : current;		}
		override protected function match(item : AbstractTween) : Boolean {			return (item is ColorTween && (current == item.current || ((item as ColorTween).displayObject == null || (item as ColorTween).displayObject == displayObject)) );		}
		override public function toTarget(toObj : Object) : void {			if(toObj is ColorTransform) {				var ct : ColorTransform = toObj as ColorTransform;							addTo("redOffset", ct.redOffset);				addTo("blueOffset", ct.blueOffset);				addTo("greenOffset", ct.greenOffset);				addTo("alphaOffset", ct.alphaOffset);							addTo("redMultiplier", ct.redMultiplier);				addTo("blueMultiplier", ct.blueMultiplier);				addTo("greenMultiplier", ct.greenMultiplier);				addTo("alphaMultiplier", ct.alphaMultiplier);			} else {				super.toTarget(toObj);			}		}
		override public function fromTarget(fromObj : Object) : void {			if(fromObj is ColorTransform) {				var ct : ColorTransform = fromObj as ColorTransform;							addFrom("redOffset", ct.redOffset);				addFrom("blueOffset", ct.blueOffset);				addFrom("greenOffset", ct.greenOffset);				addFrom("alphaOffset", ct.alphaOffset);							addFrom("redMultiplier", ct.redMultiplier);				addFrom("blueMultiplier", ct.blueMultiplier);				addFrom("greenMultiplier", ct.greenMultiplier);				addFrom("alphaMultiplier", ct.alphaMultiplier);			} else {				super.fromTarget(fromObj);			}		}
		override public function update(position : Number) : void {			var q : Number = 1 - position, propName : String, i : int = 0;						if(!inited && _propCount > 0) {				if(displayObject) {					_current = displayObject.transform.colorTransform;					_from = displayObject.transform.colorTransform;				} else {					for(i = 0;i < _propCount; i++) {						propName = propNames[i];						_from[propName] = _current[propName];					}				}				inited = true;			}						for(i = 0;i < _propCount; i++) {				propName = propNames[i];								if(propName == "redOffset") {					_current.redOffset = _from.redOffset * q + _to.redOffset * position;				} else if(propName == "redMultiplier") {					_current.redMultiplier = _from.redMultiplier * q + _to.redMultiplier * position;				} else if(propName == "greenOffset") {					_current.greenOffset = _from.greenOffset * q + _to.greenOffset * position;				} else if(propName == "greenMultiplier") {					_current.greenMultiplier = _from.greenMultiplier * q + _to.greenMultiplier * position;				} else if(propName == "blueOffset") {					_current.blueOffset = _from.blueOffset * q + _to.blueOffset * position;				} else if(propName == "blueMultiplier") {					_current.blueMultiplier = _from.blueMultiplier * q + _to.blueMultiplier * position;				} else if(propName == "alphaOffset") {					_current.alphaOffset = _from.alphaOffset * q + _to.alphaOffset * position;				} else if(propName == "alphaMultiplier") {					_current.alphaMultiplier = _from.alphaMultiplier * q + _to.alphaMultiplier * position;				} else {					_current[propName] = _from[propName] * q + _to[propName] * position;				}								if(timeline.snapClosest) _current[propName] = Math.round(_current[propName]);			}						apply();		}
		override protected function apply() : void {			if(displayObject == null) return;						displayObject.transform.colorTransform = _current;		}
		override public function dispose() : void {			_to = null;			_from = null;			displayObject = null;			_current = null;						super.dispose();		}	}}