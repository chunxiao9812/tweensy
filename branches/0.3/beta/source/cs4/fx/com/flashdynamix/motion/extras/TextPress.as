package com.flashdynamix.motion.extras {	import flash.display.*;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;		/**	 * @author FlashDynamix	 */	public class TextPress extends Sprite {		public static const CHARACTER : int = 0;		public static const WORD : int = 1;		public static const LINE : int = 2;		public static const PARAGRAPH : int = 3;		public var elements : Array = [];		public var content : Sprite;		public var gutter : Number = 2;		private var _source : TextField;		private var _mode : int = 0;		private var _scope : DisplayObjectContainer;		private var depth : int = 0;		public function TextPress(sourceTextField : TextField = null, type : int = 0, autoAddToParent : Boolean = true) : void {			_source = sourceTextField;			_mode = type;						if(autoAddToParent && _source) {								_scope = _source.parent;				depth = _scope.getChildIndex(_source);				_scope.removeChild(_source);			} else {				depth = 0;				_scope = null;			}						if(_source) update();		}		public function get length() : int {			return elements.length;		}		public function set scope(container : DisplayObjectContainer) : void {			_scope = container;						if(_scope) {				depth = _scope.getChildIndex(_source);								if(content) _scope.addChildAt(content, depth);			} else {				depth = 0;				_scope = null;				if(content.parent) content.parent.removeChild(content);			}		}		public function get scope() : DisplayObjectContainer {			return _scope;		}		public function set source(sourceTextField : TextField) : void {			_source = sourceTextField;						update();		}		public function get source() : TextField {			return _source;		}		public function set mode(type : int) : void {			_mode = type;						update();		}		public function get mode() : int {			return _mode;		}		public function elementAt(index : int) : Sprite {			return elements[index];		}		public function update() : void {			if(_source == null) return;						if(content != null && contains(content)) removeChild(content);						content = new Sprite();			addChild(content);			elements = [];						switch(_mode) {				case CHARACTER :					splitCharacters();					break;				case WORD :					splitWord();					break;				case LINE :					splitLine();					break;				case PARAGRAPH :					splitParagraph();					break;			}						content.name = _source.name;			content.opaqueBackground = _source.opaqueBackground;			content.tabEnabled = _source.tabEnabled;			content.tabIndex = _source.tabIndex;			content.scale9Grid = _source.scale9Grid;			content.filters = _source.filters;			content.blendMode = _source.blendMode;			content.transform.colorTransform = _source.transform.colorTransform;						content.x = _source.x;			content.y = _source.y;						if(_scope) _scope.addChildAt(content, depth);		}		private function splitCharacters() : void {			var text : String = _source.text;			var i : int;			var len : int = text.length;			var rect : Rectangle;			var textField : TextField;			var char : String;			var element : Sprite;						for (i = 0;i < len; i++) {				char = text.substr(i, 1);				rect = _source.getCharBoundaries(i);								if(char == "" || rect == null) continue;								element = new Sprite();				element.x = rect.x - gutter;				element.y = rect.y - gutter;								textField = cloneTextField();				textField.text = char;								elements.push(element);				element.addChild(textField);				content.addChild(element);			}		}		private function splitWord() : void {			var text : String = _source.text;			var words : Array;			var word : String;			var i : int;			var len : int = _source.numLines;			var rect : Rectangle;			var textField : TextField;			var line : String;			var element : Sprite;			var lineIndex : int = 0;			var chars : int = 0;			var charIndex : int = 0;						for (i = 0;i < len; i++) {				charIndex = _source.getLineOffset(lineIndex);				chars = _source.getLineLength(lineIndex);								line = text.substr(charIndex, chars);				words = line.split(" ");								for(var j : int = 0;j < words.length; j++) {					word = words[j];					rect = _source.getCharBoundaries(charIndex);										if(word == "" || rect == null) {						charIndex++;						continue;					}										element = new Sprite();					element.x = rect.x - gutter;					element.y = rect.y - gutter;									textField = cloneTextField();					textField.text = word;									elements.push(element);					element.addChild(textField);					content.addChild(element);										charIndex += word.length + 1;				}								lineIndex++;			}		}		private function splitLine() : void {			var text : String = _source.text;			var i : int;			var len : int = _source.numLines;			var rect : Rectangle;			var textField : TextField;			var line : String;			var element : Sprite;			var lineIndex : int = 0;			var chars : int = 0;			var charIndex : int = 0;						for (i = 0;i < len; i++) {				charIndex = _source.getLineOffset(lineIndex);				chars = _source.getLineLength(lineIndex);				line = text.substr(charIndex, chars);				rect = _source.getCharBoundaries(charIndex);								if(rect == null || line == "") {					lineIndex++;					continue;				}								element = new Sprite();				element.x = rect.x - gutter;				element.y = rect.y - gutter;								textField = cloneTextField();				textField.text = line;								elements.push(element);				element.addChild(textField);				content.addChild(element);								lineIndex++;			}		}		private function splitParagraph() : void {			var text : String = _source.text;			var paras : Array = text.split("\r");			var para : String;			var i : int;			var len : int = paras.length;			var rect : Rectangle;			var textField : TextField;			var element : Sprite;			var charIndex : int = 0;						for (i = 0;i < len; i++) {				para = paras[i];				rect = _source.getCharBoundaries(charIndex);								if(rect == null || para == "") {					charIndex++;					continue;				}								element = new Sprite();				element.y = rect.y - gutter;								textField = cloneTextField();				textField.width = _source.width;				textField.wordWrap = true;				textField.multiline = true;				textField.text = para;								elements.push(element);				element.addChild(textField);				content.addChild(element);								charIndex += para.length + 1;			}		}		private function cloneTextField() : TextField {			var textField : TextField = new TextField();						textField.name = "label";			textField.multiline = false;			textField.autoSize = TextFieldAutoSize.LEFT;			textField.selectable = _source.selectable;			textField.antiAliasType = _source.antiAliasType;			textField.defaultTextFormat = _source.getTextFormat();			textField.background = _source.background;			textField.backgroundColor = _source.backgroundColor;			textField.border = _source.border;			textField.borderColor = _source.borderColor;			textField.embedFonts = _source.embedFonts;			textField.gridFitType = _source.gridFitType;			textField.sharpness = _source.sharpness;			textField.styleSheet = _source.styleSheet;			textField.textColor = _source.textColor;			textField.thickness = _source.thickness;						return textField;		}	}}